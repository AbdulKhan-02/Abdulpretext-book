import util from "util";
import { describe, it, expect } from "vitest";
import { toXml } from "xast-util-to-xml";
import { fromXml } from "xast-util-from-xml";
import { XastNode, XastRoot } from "../src/utils/xast/types";
import { JsonGrammar } from "../src/utils/relax-ng/types";
import { createNodeToSchemaMap } from "../src/utils/relax-ng/create-node-to-schema-map";
import { visit } from "../src/utils/xast";
/* eslint-env jest */

// Make console.log pretty-print by default
const origLog = console.log;
console.log = (...args) => {
    origLog(...args.map((x) => util.inspect(x, false, 10, true)));
};

describe("Relax NG tests", () => {
    /* JsonGrammar generated by the following rnc grammar.
grammar {
	start = Start


	Start = element root {
		(A | B)*
	}
	A = element a { 
		C1* 
	}
	B = element b { C2 }
	C1 = element c { text }
	C2 = element c { D }
	D = element d { text }
}
    */
    const jsonGrammar: JsonGrammar = {
        startType: "ElementStart",
        refs: {
            XMLText: {
                type: "text",
            },
            ElementStart: {
                type: "element",
                name: "root",
                attributes: {},
                children: [
                    {
                        ref: "ElementA",
                    },
                    {
                        ref: "ElementB",
                    },
                ],
                textChildrenAllowed: false,
            },
            ElementB: {
                type: "element",
                name: "b",
                attributes: {},
                children: [
                    {
                        ref: "ElementC2",
                    },
                ],
                textChildrenAllowed: false,
            },
            ElementC2: {
                type: "element",
                name: "c",
                attributes: {},
                children: [
                    {
                        ref: "ElementD",
                    },
                ],
                textChildrenAllowed: false,
            },
            ElementD: {
                type: "element",
                name: "d",
                attributes: {},
                children: [],
                textChildrenAllowed: true,
            },
            ElementA: {
                type: "element",
                name: "a",
                attributes: {},
                children: [
                    {
                        ref: "ElementC1",
                    },
                ],
                textChildrenAllowed: false,
            },
            ElementC1: {
                type: "element",
                name: "c",
                attributes: {},
                children: [],
                textChildrenAllowed: true,
            },
        },
    };
    it("Can create an element map based on a schema", async () => {
        let source: string;
        source = `<root><a><c>hi</c></a><b><c><d>there</d></c></b></root>`;
        const ast = fromXml(source) as XastRoot;
        const { nodeToTypeMap, warnings } = createNodeToSchemaMap(
            ast,
            jsonGrammar
        );
        const types: string[][] = [];
        visit(ast, (node) => {
            const type = nodeToTypeMap.get(node);
            if (type) {
                types.push([toXml(node), type]);
            }
        });

        expect(types).toEqual([
            [
                "<root><a><c>hi</c></a><b><c><d>there</d></c></b></root>",
                "ElementStart",
            ],
            ["<a><c>hi</c></a>", "ElementA"],
            ["<c>hi</c>", "ElementC1"],
            ["hi", "XMLText"],
            ["<b><c><d>there</d></c></b>", "ElementB"],
            ["<c><d>there</d></c>", "ElementC2"],
            ["<d>there</d>", "ElementD"],
            ["there", "XMLText"],
        ]);
        expect(warnings).toHaveLength(0);
    });
    it("Gives warning when mapping incorrect element in schema", async () => {
        let source: string;
        source = `<root><d/><a><c>hi</c></a><b><c><d>there</d></c></b></root>`;
        const ast = fromXml(source) as XastRoot;
        const { nodeToTypeMap, warnings } = createNodeToSchemaMap(
            ast,
            jsonGrammar
        );
        const types: string[][] = [];
        visit(ast, (node) => {
            const type = nodeToTypeMap.get(node);
            if (type) {
                types.push([toXml(node), type]);
            }
        });

        expect(types).toEqual([
            [
                "<root><d></d><a><c>hi</c></a><b><c><d>there</d></c></b></root>",
                "ElementStart",
            ],
            ["<d></d>", "ElementD"],
            ["<a><c>hi</c></a>", "ElementA"],
            ["<c>hi</c>", "ElementC1"],
            ["hi", "XMLText"],
            ["<b><c><d>there</d></c></b>", "ElementB"],
            ["<c><d>there</d></c>", "ElementC2"],
            ["<d>there</d>", "ElementD"],
            ["there", "XMLText"],
        ]);
        expect(warnings).toHaveLength(1);
    });
});
